#!/usr/bin/python

import os
from os.path import join as _opj
from mvpa2.datasets.sources import OpenFMRIDataset

datapath = "/home/data/psyinf/forrest_gump/anondata"
#datapath = "/home/mih/forrest/anondata"
logpath = _opj(os.path.dirname(datapath), 'condor_logs')

# dataset handler
of = OpenFMRIDataset(datapath)

model = 3
task = 6

def mk_level2_fsf(
        of,
        model,
        subj,
        task=None,
        runs=None,
        fsf_fname=_opj('%(modeldir)s', 'task%(task)03d_2ndlvl.fsf'),
        feat_inputdir=_opj('%(modeldir)s', 'task%(task).3i_run%(run).3i.feat'),
        fsfstub_fname=None,
        result_dir=None,
        overwrite_results=True,
        ):
    """
    Based on mk_level2_fsf.py by Russell Poldrack (Simplified BSD license).

    """
    # try to determine the task automatically from the model
    task = set([c['task'] for c in of.get_model_conditions(model)])
    if not len(task) == 1:
        raise ValueError("ambiguous task list for model %.3i, "
                         "use `task` argument to disambiguate" % (model,))
    task = list(task)[0]

    if runs is None:
        # process all runs in the absence of a selection
        runs = of.get_task_bold_run_ids(task)[subj]

    # few convenience shortcuts
    subdir = _opj(of.basedir, 'sub%03d' % subj)
    modelbasedir = _opj(subdir, 'model')
    modeldir= _opj(modelbasedir, 'model%03d' % model)

    # read the conditions_key file, throw away any condition that is not relevant for
    # the current task
    conditions = [c for c in of.get_model_conditions(model) if c['task'] == task]

    expandvars = {
        'sub': subj,
        'subdir': subdir,
        'modeldir': modeldir,
        'task': task,
    }

    # load custom contrasts
    contrasts = of.get_model_contrasts(model,).get(task, {})

    # write to a file or into a string
    if fsf_fname is None:
        from cStringIO import StringIO
        outfile = StringIO()
    else:
        outfilename = fsf_fname % expandvars
        outfile = open(outfilename,'w')

    outfile.write('# Automatically generated\n')

    # first get common lines from stub file
    if not fsfstub_fname is None:
        stubfile=open(fsfstub_fname,'r')
        for l in stubfile:
            outfile.write(l)
        stubfile.close()

    # now add custom lines

    # TODO
    # first check for empty EV file
    #empty_evs=[]
    #for r in range(len(runs)):
    #    if os.path.exists("%s/%s/sub%03d/model/model%03d/onsets/task%03d_run%03d/empty_evs.txt"%(basedir,taskid,subnum, modelnum,tasknum,runs[r])):
    #        evfile=open("%s/%s/sub%03d/model/model%03d/onsets/task%03d_run%03d/empty_evs.txt"%(basedir,taskid,subnum,modelnum,tasknum,runs[r]),'r')
    #        empty_evs=[int(x.strip()) for x in evfile.readlines()]
    #        evfile.close()

    outfile.write('\n\n### AUTOMATICALLY GENERATED PART###\n\n')

    if result_dir is None:
        result_dir = _opj('%(modeldir)s', 'task%(task)03d_2ndlvl.gfeat')
    result_dir = result_dir % expandvars
    outfile.write('set fmri(outputdir) "%s"\n' % (result_dir,))
    outfile.write('set fmri(npts) %d\n' % len(runs)) # number of runs
    outfile.write('set fmri(multiple) %d\n' % len(runs)) # number of runs
    outfile.write('set fmri(ncopeinputs) %d\n'
                  % int(len(conditions) + 1 + len(contrasts))) # nmbr of copes

    for r in range(len(runs)):
        rexpandvars = expandvars.copy()
        rexpandvars['run'] = runs[r]
        outfile.write('set feat_files(%d) "%s"\n'
                      % (int(r+1), feat_inputdir % rexpandvars))
        outfile.write('set fmri(evg%d.1) 1\n' % int(r + 1))
        outfile.write('set fmri(groupmem.%d) 1\n' % int(r + 1))
        # TODO: remove here when TODO below is dealt with

    for c in range(len(conditions) + 1 + len(contrasts)): # nmbr of copes
        outfile.write('set fmri(copeinput.%d) 1\n' % int(c + 1))
    # TODO
    # need to figure out if any runs have empty EVs and leave them out
    #    if not c+1 in empty_evs:
    #        outfile.write('set fmri(copeinput.%d) 1\n'%int(c+1))
    #    else:
    #         outfile.write('set fmri(copeinput.%d) 0\n'%int(c+1))

    if fsf_fname is None:
        # return the FSF file content as a string
        outfile.seek(0)
        fsf = outfile.read()
        outfile.close()
        return fsf
    else:
        # return the filename
        outfile.close()
        return outfilename
# preamble for a condor submit file
print """
universe = vanilla
output = %(logpath)s/$(CLUSTER).$(PROCESS).out
error = %(logpath)s/$(CLUSTER).$(PROCESS).err
log = %(logpath)s/$(CLUSTER).$(PROCESS).log
initialdir = %(datapath)s
getenv = True
request_cpus = 1
request_memory = 4000
should_transfer_files = NO
transfer_executable = False
executable = %(FSLDIR)s/bin/feat

""" % dict(datapath=datapath, logpath=logpath, FSLDIR=os.environ['FSLDIR'])

tbri = of.get_task_bold_run_ids(task)
for sub in tbri:
    fsf_fname = mk_level2_fsf(
        of,
        model=model,
        subj=sub,
        fsf_fname='/home/data/psyinf/forrest_gump/visloc/glm/sub%(sub)03d_design.fsf',
        feat_inputdir='/home/data/psyinf/forrest_gump/visloc/glm/sub%(sub)03d_run%(run)03d.feat',
        fsfstub_fname=_opj(datapath, 'models', 'model003',
            '2nd_lvl_fsf.stub'),
        result_dir='/home/data/psyinf/forrest_gump/visloc/glm/sub%(sub)03d_10mm_raw',
    )
    print "arguments = %s\nqueue 1\n" % fsf_fname
